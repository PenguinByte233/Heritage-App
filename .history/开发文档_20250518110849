vue3开发
Below is a concise development document for a “非遗小程序”项目，采用 Node.js + Express + MySQL，包含前端规划、数据库设计与后端 API 设计。

一、概要
本项目分前端（微信小程序原生或 H5）、后端（Node.js + Express）与数据库（MySQL）三层架构，前端负责页面渲染与交互，后端提供 RESTful 接口，数据库存储用户信息，非遗学习资料包括大标题、小标题、对应的图片url、文本url，我希望把服务器建在本地通过http://localhost:3001/+图片路径来放入到数据库内供前端使用

二、前端规划
整体结构：
根目录Demo：
  frontend
  backend/uploads/assets（我把全部静态资源都放到后端这个文件内了，你可以分析每一个大类小类和商品类供数据库的数据插入编写使用）
页面结构：共五个主页面：
  以下页面能调用api获取的资源就用api获取，不用静态资源。

Home：顶部横向滚动随机展示5张具有代表性的图片我后期会筛选放到前端静态资源处
中间的非遗资源等先不变
然后下面是一个非遗项目的轮播图展示 7 个非遗大类(传统表演艺术、传统服饰、传统节日与庆典、传统乐器与音乐、传统艺术与工艺、传统装饰与配饰、文化与创意产业)我后续会随机挑选放到前端的静态资源文件内使用，然后点击哪个图片的大类就直接跳转到学习页面内的大类供用户自己选择小类进行学习。
去除非遗传承人这一选项

Buy：一共分为竹编包包、竹编灯罩、竹编篮子、竹编扇子、竹编椅子，你帮我分类，并且点击商品卡片能够进入对应的详情页面，页面就只需要包括商品图片与价格，点击立即购买就加入到订单当中，在我的页面内可以查看，并且用api来获取对应的内容。


Learn：页面是首页非遗项目点击后跳转的地方，供用户学习对应的内容，顶部是一个大标题的banner，用来区分大类，点击哪一个大类就请求对应大类下的小类的内容，每个大类下面的内容区域是小标题+对应的第一张图片的卡片，点击进去对应的详情页面，详情页面就是请求对应卡片的图片以及文本，图片插入到文本当中。


Chat：也就是社区广场，这里只是用来发帖的，帖子包含内容、发帖时间、发帖作者昵称、帖子下的评论，还有点赞功能。
。

Profile：最后这个就是用户信息列表，有登录注册功能，只需要通过手机号和密码登录，登录先调用api查看是否存在用户，若没有就注册，还有一个就是我的订单页，可以查看在商品页面下单的商品即可。
。
1. 数据库表设计
1.1 用户表 (users)
字段名	数据类型	说明	备注
id	INT	主键，自增	
nickname	VARCHAR(100)	用户昵称	
phone_number	VARCHAR(15)	用户手机号	唯一
password	VARCHAR(255)	用户密码（经过加密处理）	
created_at	DATETIME	创建时间	默认当前时间
updated_at	DATETIME	更新时间	默认当前时间
1.2 非遗项目表 (learning)
字段名	数据类型	说明	备注
id	INT	主键，自增	
title	VARCHAR(255)	非遗项目的大标题	
subtitle	VARCHAR(255)	非遗项目的小标题	
image_url	VARCHAR(255)	项目封面图片的 URL	
content_url	VARCHAR(255)	项目内容文本文件的 URL	

1.3 商品表 (products)
字段名	数据类型	说明	备注
id	INT	主键，自增	
name	VARCHAR(100)	商品名称	
category	VARCHAR(50)	商品分类（如竹编包包、竹编灯罩等）	
image_url	VARCHAR(255)	商品图片的 URL	
price	DECIMAL(10,2)	商品价格	

1.4 订单表 (orders)
字段名	数据类型	说明	备注
id	INT	主键，自增	
user_id	INT	用户 ID（外键，关联用户表）	
product_id	INT	商品 ID（外键，关联商品表）	
quantity	INT	购买数量	
created_at	DATETIME	创建时间	默认当前时间

1.5 社区表 (community)
字段名	数据类型	说明	备注
id	INT	主键，自增	
author_name	VARCHAR(100)	发帖作者的名字（关联用户表的昵称）
content	TEXT	帖子的内容	
created_at	DATETIME	创建时间	默认当前时间
updated_at	DATETIME	更新时间	默认当前时间
1.6 评论表 (comments)
字段名	数据类型	说明	备注
id	INT	主键，自增	
post_id	INT	关联的帖子 ID	外键，指向 community 表的 id
author_name	VARCHAR(100)	评论作者的名字	
content	TEXT	评论的内容	
created_at	DATETIME	创建时间	默认当前时间
SQL 建表语句
SQL
-- 用户表
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nickname VARCHAR(100) NOT NULL,
    phone_number VARCHAR(15) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- 非遗项目表
CREATE TABLE learning (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    subtitle VARCHAR(255) NOT NULL,
    image_url VARCHAR(255) NOT NULL,
    content_url VARCHAR(255) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- 商品表
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    category VARCHAR(50) NOT NULL,
    image_url VARCHAR(255) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- 订单表
CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
);

-- 社区表
CREATE TABLE community (
    id INT AUTO_INCREMENT PRIMARY KEY,
    author_name VARCHAR(100) NOT NULL,
    content TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- 评论表
CREATE TABLE comments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT NOT NULL,
    author_name VARCHAR(100) NOT NULL,
    content TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES community(id) ON DELETE CASCADE
);
二、API 接口文档
1. 用户相关 API
1.1 用户注册
请求方法：POST
请求 URL：/api/users/register
请求参数：
nickname (string, 必填): 用户昵称
phone_number (string, 必填): 用户手机号
password (string, 必填): 用户密码
响应：
状态码：
201: 创建成功
400: 参数错误
409: 用户已存在
响应示例：
JSON
{
  "status": "success",
  "message": "注册成功"
}
1.2 用户登录
请求方法：POST
请求 URL：/api/users/login
请求参数：
phone_number (string, 必填): 用户手机号
password (string, 必填): 用户密码
响应：
状态码：
200: 登录成功
400: 参数错误
401: 用户名或密码错误
响应示例：
JSON
{
  "status": "success",
  "data": {
    "nickname": "用户昵称",
    "phone_number": "用户手机号"
  },
  "message": "登录成功"
}
2. 非遗项目相关 API
2.1 获取大标题下的小标题及封面图
请求方法：GET
请求 URL：/api/learning/headers
请求参数：
title (string, 必填): 大标题
响应：
状态码：
200: 成功
404: 未找到
响应示例：
JSON
{
  "status": "success",
  "data": [
    {
      "subtitle": "小标题1",
      "image_url": "https://example.com/image1.jpg"
    },
    {
      "subtitle": "小标题2",
      "image_url": "https://example.com/image2.jpg"
    }
  ]
}
2.2 获取小标题对应内容
请求方法：GET
请求 URL：/api/learning/content
请求参数：
subtitle (string, 必填): 小标题
响应：
状态码：
200: 成功
404: 未找到
响应示例：
JSON
{
  "status": "success",
  "data": {
    "images": [
      "https://example.com/content_image1.jpg",
      "https://example.com/content_image2.jpg"
    ],
    "text_content": "这是内容文本的具体描述，来自于 txt 文件的内容。"
  }
}
3. 商品相关 API
3.1 获取所有商品
请求方法：GET
请求 URL：/api/products
请求参数：无
响应：
状态码：
200: 成功
响应示例：
JSON
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "name": "竹编包包",
      "category": "竹编",
      "image_url": "https://example.com/bamboo_bag.jpg",
      "price": 100.00
    },
    {
      "id": 2,
      "name": "竹编灯罩",
      "category": "竹编",
      "image_url": "https://example.com/bamboo_lamp_shade.jpg",
      "price": 150.00
    }
  ]
}
3.2 获取商品详情
请求方法：GET
请求 URL：/api/products/:id
请求参数：
id (int, 必填): 商品 ID
响应：
状态码：
200: 成功
404: 未找到
响应示例：
JSON
{
  "status": "success",
  "data": {
    "id": 1,
    "name": "竹编包包",
    "category": "竹编",
    "image_url": "https://example.com/bamboo_bag.jpg",
    "price": 100.00,
    "description": "这是一个精美的竹编包包，适合日常使用。"
  }
}
4. 订单相关 API
4.1 创建订单
请求方法：POST
请求 URL：/api/orders
请求参数：
user_id (int, 必填): 用户 ID
product_id (int, 必填): 商品 ID
quantity (int, 必填): 购买数量
响应：
状态码：
201: 创建成功
400: 参数错误
响应示例：
JSON
{
  "status": "success",
  "message": "订单创建成功"
}
5. 社区相关 API
5.1 发布帖子
请求方法：POST
请求 URL：/api/community/post
请求参数：
author_name (string, 必填): 发帖人的名字
content (string, 必填): 帖子的内容
响应：
状态码：
201: 发布成功
400: 参数错误
响应示例：
JSON
{
  "status": "success",
  "message": "帖子发布成功"
}
5.2 获取帖子列表
请求方法：GET
请求 URL：/api/community/posts
请求参数：无
响应：
状态码：
200: 成功
响应示例：
JSON
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "author_name": "作者1",
      "content": "这是帖子内容1",
      "created_at": "2025-05-17T12:00:00"
    },
    {
      "id": 2,
      "author_name": "作者2",
      "content": "这是帖子内容2",
      "created_at": "2025-05-17T12:05:00"
    }
  ]
}